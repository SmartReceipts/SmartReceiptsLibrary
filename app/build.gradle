plugins {
    id("com.android.application")
    id("com.github.triplet.play") version "2.6.2"
    id("org.jlleitschuh.gradle.ktlint")
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'kotlin-android'
apply plugin: 'org.jetbrains.kotlin.android.extensions'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-kapt'

androidExtensions {
    experimental = true
}

android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 2201
        versionName "4.20.2.2201"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        // Required for espresso (plus clears the app on launch)
        testInstrumentationRunner "co.smartreceipts.android.test.runner.ApplicationAwareAndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
    }


    signingConfigs {
        debug {
            storeFile file("../keystore/debug.keystore")
        }
        release {
            // You need to specify either an absolute path or include the
            // keystore file in the same directory as the build.gradle file.
            storeFile file("../upload_key.jks")
            storePassword System.getenv("KEY_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    bundle {
        language {
            // We include all languages to allow users to choose their report language
            enableSplit = false
        }
        density {
            // Performing initial tests with the split disabled for simplicity
            enableSplit = false
        }
        abi {
            // Force this reduce the size of PDF generation libraries to avoid an Android bug
            enableSplit = true
        }
    }


    dexOptions {
        javaMaxHeapSize "2048M"
    }

    flavorDimensions "versionType"

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
    }

    productFlavors {
        free {
            applicationId "wb.receipts"
            dimension "versionType"
            proguardFile 'flavor-not-floss-rules.pro'
        }
        plusFlavor {
            applicationId "wb.receiptspro"
            dimension "versionType"
            proguardFile 'flavor-not-floss-rules.pro'
        }
        fireDepartmentFlavor {
            applicationId "co.smartreceipts.fire.department.tracker.android"
            dimension "versionType"
            proguardFile 'flavor-not-floss-rules.pro'
        }
        flossFlavor {
            applicationId "wb.receipts.floss"
            dimension"versionType"
        }
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage', 'MissingTranslation'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
            all {
                jvmArgs '-noverify'
            }
        }
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    dependencies {
        implementation fileTree(dir: 'libs', include: '*.jar')
        implementation project(':core')
        implementation project(':wbMiniLibrary')
        implementation project(':aws')

        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

        implementation "com.android.support:support-v4:$SUPPORT_LIBRARY_VERSION"
        implementation "com.android.support:appcompat-v7:$SUPPORT_LIBRARY_VERSION"
        implementation "com.android.support:cardview-v7:$SUPPORT_LIBRARY_VERSION"
        implementation "com.android.support:recyclerview-v7:$SUPPORT_LIBRARY_VERSION"
        implementation "com.android.support:exifinterface:$SUPPORT_LIBRARY_VERSION"
        implementation "com.android.support:design:$SUPPORT_LIBRARY_VERSION"

        // Note: We don't use custom tabs, but it stops the support library from complaining about mixed versions
        implementation "com.android.support:customtabs:$SUPPORT_LIBRARY_VERSION"

        implementation "com.android.support:multidex:$MULTIDEX_VERSION"

        implementation "com.android.support.constraint:constraint-layout:$CONSTRAINT_LAYOUT_VERSION"

        implementation "com.google.http-client:google-http-client-gson:$GOOGLE_HTTP_CLIENT_VERSION"
        implementation("com.google.api-client:google-api-client-android:$GOOGLE_API_CLIENT_VERSION") {
            exclude group: 'org.apache.httpcomponents'
        }
        implementation("com.google.apis:google-api-services-drive:$GOOGLE_API_SERVICES_VERSION") {
            exclude group: 'org.apache.httpcomponents'
        }
        implementation "com.google.android.gms:play-services-auth:$DRIVE_API_VERSION"
        implementation "com.google.firebase:firebase-core:$FIREBASE_CORE_VERSION"
        implementation "com.google.firebase:firebase-crash:$FIREBASE_CRASH_VERSION"
        implementation "com.google.firebase:firebase-messaging:$FIREBASE_MESSAGING_VERSION"

        implementation "com.squareup.picasso:picasso:$PICASSO_VERSION"
        implementation "com.squareup.okhttp3:okhttp:$OK_HTTP_VERSION"
        implementation "com.squareup.okhttp3:logging-interceptor:$OK_HTTP_VERSION"
        implementation "com.squareup.retrofit2:retrofit:$RETROFIT_VERSION"
        implementation "com.squareup.retrofit2:converter-gson:$RETROFIT_VERSION"
        implementation "com.squareup.moshi:moshi:$MOSHI_VERSION"
        implementation "com.squareup.moshi:moshi-adapters:$MOSHI_VERSION"
        kapt "com.squareup.moshi:moshi-kotlin-codegen:$MOSHI_VERSION"
        implementation "com.squareup.retrofit2:converter-moshi:$RETROFIT_VERSION"

        //Rx2
        implementation "com.jakewharton.rxbinding3:rxbinding:$RX2_BINDING_VERSION"
        implementation "com.jakewharton.rxbinding3:rxbinding-appcompat:$RX2_BINDING_VERSION"
        implementation "com.squareup.retrofit2:adapter-rxjava2:$RETROFIT_VERSION"

        implementation "commons-io:commons-io:$IO_UTILS_VERSION"
        implementation "com.hadisatrio:Optional:$OPTIONAL_VERSION"

        implementation "com.jakewharton:butterknife:$BUTTERKNIFE_VERSION"
        kapt "com.jakewharton:butterknife-compiler:$BUTTERKNIFE_VERSION"

        implementation "com.tapadoo.android:alerter:$ALERTER_VERSION"
        implementation "com.github.clans:fab:$FAB_MENU_VERSION"

        implementation "com.tom_roush:pdfbox-android:$PDFBOX_ANDROID_VERSION"
        implementation "com.github.barteksc:pdfium-android:$PDFIUM_VERSION"

        implementation "com.github.tony19:logback-android:$LOGBACK_VERSION"

        // Note: Periodically check for updates here so we can revert to the official version
        // implementation "com.github.PhilJay:MPAndroidChart:$MP_ANDROID_CHART_VERSION"
        implementation "com.github.wbaumann:MPAndroidChart:$MP_ANDROID_CHART_FORK_WITH_FIXES_VERSION"

        implementation("com.h6ah4i.android.widget.advrecyclerview:advrecyclerview:$ADV_RECYCLER_VIEW_VERSION@aar") {
            transitive = true
        }

        implementation "com.hannesdorfmann:adapterdelegates4-kotlin-dsl-layoutcontainer:$ADAPTER_DELEGATES_VERSION"

        implementation "com.github.pqpo:SmartCropper:$SMART_CROPPER_VERSION"

        // Dagger
        kapt "com.google.dagger:dagger-compiler:$DAGGER_VERSION"
        kapt "com.google.dagger:dagger-android-processor:$DAGGER_VERSION"

        // Crashlytics
        implementation "com.crashlytics.sdk.android:crashlytics:$CRASHLYTICS_VERSION"

        implementation "com.google.android.gms:play-services-oss-licenses:$GOOGLE_OSS_VERSION"

        // Unit Tests
        testImplementation "org.robolectric:robolectric:$ROBOLECTRIC_VERSION"
        testImplementation "junit:junit:$JUNIT_VERSION"
        testImplementation "org.mockito:mockito-core:$MOCKITO_VERSION"
        testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$MOCKITO_KOTLIN_VERSION"
        testImplementation "androidx.test:core:$ANDROID_TEST_RUNNER_VERSION"

        // Espresso Tests
        androidTestImplementation "androidx.test.espresso:espresso-core:$ESPRESSO_VERSION"
        androidTestImplementation "androidx.test:runner:$ANDROID_TEST_RUNNER_VERSION"
        androidTestImplementation "androidx.test:rules:$ANDROID_TEST_RUNNER_VERSION"
        androidTestUtil "androidx.test:orchestrator:$ANDROID_TEST_RUNNER_VERSION"

        // Leak Canary
        debugImplementation "com.squareup.leakcanary:leakcanary-android:$LEAK_CANARY_VERSION"
        debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:$LEAK_CANARY_VERSION"
        releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$LEAK_CANARY_VERSION"

        // Special dependencies for free flavor
        freeImplementation "com.google.android.gms:play-services-analytics:$GOOGLE_ANALYTICS_VERSION"

        // Free ads
        freeImplementation "com.google.android.gms:play-services-ads:$ADMOB_VERSION"
    }

    // Note: This version is controlled in the base build file
    apply plugin: "com.google.gms.google-services"
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

ktlint {
    android.set(true)
}

task secretsExtraction(description: "Allows us to extract our secrets if we have a local decrpytion key") {

    doLast {
        println "Running our secrets extractor to attempt to replace our placeholder files"

        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) { // windows

            exec {
                workingDir rootDir
                commandLine 'cmd','/c','scripts\\secrets_extractor.bat'
            }

        } else { // mac

            exec {
                workingDir rootDir
                executable "chmod"
                args = ["+x", "${rootDir}/scripts/secrets_extractor.sh"]
            }

            exec {
                workingDir rootDir
                executable "${rootDir}/scripts/secrets_extractor.sh"
                // Note: We currently do NOT validate that this succeeds when creating a release build.
                // We should add this extra fail-safe to help verify that we do not release a fault build.
            }
            println ""
            println ""
        }
    }
}

task translateToIOS(description: "Twine-translate Android .xml locale files to iOS, check for differences in iOS GitHub repo, create pull request for the iOS repo with the new translations if need be") {
    doLast {
        exec {
            workingDir rootDir
            executable "chmod"
            args = ["+x", "${rootDir}/scripts/barebones-locale-tool.sh"]
            // Note: Used for Travis execution.
        }
        exec {
            workingDir rootDir
            executable "${rootDir}/scripts/barebones-locale-tool.sh"
        }
    }
}

play {
    serviceAccountCredentials = file("GPLAY_KEY.json")
    track = "beta"
    userFraction = 100
    releaseStatus = "completed"
}

preBuild.dependsOn secretsExtraction
